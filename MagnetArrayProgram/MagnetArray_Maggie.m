function  MagnetArray
%
% <This program is based on paper 'A compact permanent magnet array with
% a remote homogeneous field'. Andrew E.Marble, Igor V.Mastikhin,
% Bruce G Colpitts and Bruce J.Balcom>
%

clc %clear command window

%% declear and/or initialize global variables
global B B_Z B_Y Z Y Zm Ym
global ZLine YLine 
YLine = []; ZLine = [];

%% ------------ GUI layout ---------------
% set colour to be default
panelColor = get(0,'DefaultUicontrolBackgroundColor');

% create a figure to hold the program
f = figure('Units', 'normalized',...
    'Position',[0.05 0.05 0.8 0.78],...  % position of the figure 
    'Color',panelColor,...% default color
    'Name','MagnetArrays');    % name of the figure

% add a tool bar to hold two push buttons: About and Help
addToolbar = uitoolbar(f); % creat the tool bar
%cdat_about = imread('about','bmp'); % load UNB logo image as the About image

% add the About push button
%aboutPushtool= uipushtool(addToolbar,'CData',cdat_about,... % image
%    'TooltipString','About This Program',... % display when move mouse cursor over
 %   'ClickedCallback',@about_callback); % callback function

% add the Help push button
%cdat_help = imread('help.bmp','bmp');% load help image
%helpPushtool= uipushtool(addToolbar,'CData',cdat_help,...% image
 %   'TooltipString','Click for Help (Windonws Only)',...% display when move mouse cursor over
  %  'ClickedCallback',@help_callback); % callback function

%% Create the top panel container
topPanel = uipanel('bordertype','etchedin',...
    'BackgroundColor',panelColor,...
    'Units','normalized',...% normalized units as between [0,1]
    'Position',[0.01 0.45 0.98 0.55],...% position of the figure
    'FontWeight','bold',...% make it bold
    'Title', '1. Magnetic Field Contour',... % name of the figure
    'Parent',f); % parent figure

%% 
% Add magnetic field contour plot
handles.magneticField = axes('parent',topPanel,...
    'Position', [0.28 0.115 0.52 0.57],...
    'HandleVisibility','callback');

% String of magnetic field contour plot
str_magneticField = uicontrol('Style','text',...
    'FontWeight','bold',...
    'String','Magnetic Field Contour Plot',...
    'Units','normalized',...
    'Position',[0.4 0 0.3 0.05],...
    'parent',topPanel);

% Add the Z cross section plot
handles.magneticFieldZ = axes('parent',topPanel,...
    'Position', [0.88 0.12 0.11 0.58],...
    'HandleVisibility','callback');

% Add labels 
ylabel(handles.magneticFieldZ,'B_o','fontsize',8);
xlabel(handles.magneticFieldZ,'Y','fontsize',8);

% Add the Y cross section plot
handles.magneticFieldY = axes('parent',topPanel,...
    'Position', [0.28 0.79 0.52 0.19],...
    'HandleVisibility','callback');

% Add labels
ylabel(handles.magneticFieldY,'B_o','fontsize',8);
xlabel(handles.magneticFieldY,'Z','fontsize',8);

% Add |B| string
str_B_Mag = uicontrol('Style','text',...
    'String','|B|',...
    'FontWeight','bold',...
    'FontAngle','italic',...
    'Units','normalized',...
    'Position',[0.2 0.4 0.05 0.04],...
    'parent',topPanel,...
    'HandleVisibility','on');

%Add Y slider
YSlider = uicontrol('Style','slider',...
    'Units','normalized',...
    'Position',[0.12 0.15 0.02 0.8],...
    'sliderstep',[0.05 0.05],...% slider step size
    'min',0,'max',1,... % set the slider value to be between [0,1]. Other values are converted to a value between [0,1]
    'value',0,... % set current value to be 0
    'BackgroundColor',[1 1 1],...
    'parent',topPanel);

% Set Y slider callback function
set(YSlider,'callback',@YSlider_callback);

% Add strings
str_YSlider = uicontrol('Style','text',...
    'String','Y',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.105 0.95 0.05 0.05],...
    'parent',topPanel);

% Add text to show the current value of the Y slider
YText = uicontrol('Style','text',...
    'Units','normalized',...
    'FontWeight','bold',...
    'Position',[0.11 0.045 0.04 0.06],...
    'String','-1',...% set default current value to be -1
    'parent',topPanel,...
    'Callback',@YText_callback);

%Add Z slider
ZSlider = uicontrol('Style','slider',...
    'Units','normalized',...
    'Position',[0.17 0.15 0.02 0.8],...
    'sliderstep',[0.05 0.05],...
    'min',0,'max',1,...% see yminSlider
    'value',0,...
    'BackgroundColor',[1 1 1],...
    'parent',topPanel);

% Set Z slider callback function
set(ZSlider,'callback',@ZSlider_callback);

% Add strings
str_ZSlider = uicontrol('Style','text',...
    'String','Z',...
    'FontWeight','bold',...
    'min',1.5,'max',5,...
    'Units','normalized',...
    'Position',[0.157 0.95 0.05 0.05],...
    'parent',topPanel);

% Add text to show the current value of Z slider
ZText = uicontrol('Style','text',...
    'Units','normalized',...
    'Position',[0.16 0.045 0.04 0.06],...
    'FontWeight','bold',...
    'String','-6',...% set default current value to be -6
    'parent',topPanel,...
    'HandleVisibility','on',...
    'Callback',@ZText_callback);

% Add Ymin/Ymax/Zmax/Zmin. User can input these values to change the
% boundary of the magnetic field plot.
% (Ymin,Ymax) is the range of Y slider and (Zmin,Zmax) is the range of Z
% slider.

setYmin = uicontrol('Style','edit',...% text edit box
    'Units','normalized',...
    'Position',[0.02 0.8 0.06 0.06],...
    'BackgroundColor',[1 1 1],...% color is white 
    'parent',topPanel,...
    'HandleVisibility','on',...
    'String', '-1'); % Ymin default value

setYmax = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.02 0.6 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'String','5');% Ymax default value

setZmin = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.02 0.4 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'String','-6'); % Zmin default value

setZmax = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.02 0.2 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'String','6'); % Zmax default value

% Add strings
str_setYmin = uicontrol('Style','text',...
    'String','Set Ymin:',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.86 0.08 0.05],...
    'parent',topPanel);

str_setYmax= uicontrol('Style','text',...
    'String','Set Ymax:',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.66 0.08 0.05],...
    'parent',topPanel);

str_setZmin = uicontrol('Style','text',...
    'String','Set Zmin:',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.46 0.08 0.05],...
    'parent',topPanel);

str_setZmax= uicontrol('Style','text',...
    'String','Set Zmax:',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.26 0.08 0.05],...
    'parent',topPanel);

% Add export buttons to export values of B, Y cross Section and Z cross
% section. Data format is text and ASCII.
exportYBtn = uicontrol('String','Export Y Cross Section',...
    'HorizontalAlignment','left',... 
    'Units','normalized',...
    'Position',[0.81 0.93 0.18 0.07],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'Callback',@exportYBtnClicked);

exportZBtn = uicontrol('String','Export Z Cross Section',...
    'HorizontalAlignment','left',... 
    'Units','normalized',...
    'Position',[0.81 0.84 0.18 0.07],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'Callback',@exportZBtnClicked);

exportContourBtn = uicontrol('String','Export    |B|',...
    'HorizontalAlignment','left',... 
    'Units','normalized',...
    'Position',[0.81 0.75 0.18 0.07],...
    'parent',topPanel,...
    'HandleVisibility','on',...
    'Callback',@exportContourBtnClicked);
%% Add the bottom panel as a container to hold the three magnets
bottomPanel = uipanel('bordertype','etchedin',...
    'BackgroundColor',panelColor,...
    'Units','normalized',...
    'Position',[0.01 0.01 0.98 0.455],...
    'FontWeight','bold',...
    'Title', '2. Magnets Positions ',...
    'Parent',f);

%% Add width,height,Z,Y for three magnets
% Add strings
str_width = uicontrol('Style','text',...
    'String','Width(cm)',...
    'Units','normalized',...
    'FontWeight','bold',...
    'Position',[0.035 0.9 0.08 0.05],...
    'parent',bottomPanel);

str_height = uicontrol('Style','text',...
    'String','Height(cm)',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.11 0.9 0.1 0.05],...
    'parent',bottomPanel);

str_Z = uicontrol('Style','text',...
    'String','Z(cm)',...
    'Units','normalized',...
    'FontWeight','bold',...
    'Position',[0.2 0.9 0.08 0.05],...
    'parent',bottomPanel);

str_Y = uicontrol('Style','text',...
    'String','Y(cm)',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.28 0.9 0.08 0.05],...
    'parent',bottomPanel);

str_1 = uicontrol('Style','text',...
    'String','1(BLK)',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0 0.8 0.05 0.05],...
    'parent',bottomPanel);

str_2 = uicontrol('Style','text',...
    'String','2(RED)',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0 0.6 0.05 0.05],...
    'parent',bottomPanel);

str_3 = uicontrol('Style','text',...
    'String','3(BLU)',...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0 0.4 0.05 0.05],...
    'parent',bottomPanel);

% Left Magnet 
width_magnetL = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.05 0.8 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String', '3'); % Ymin default value
height_magnetL = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.13 0.8 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','3');% Ymax default value
Z_magnetL = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.21 0.8 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','-3.008'); % Zmin default value
Y_magnetL = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.29 0.8 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','0'); % Zmax default value

% Center magnet
width_magnetC = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.05 0.6 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String', '2'); % Ymin default value
height_magnetC = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.13 0.6 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','3');% Ymax default value
Z_magnetC = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.21 0.6 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','0'); % Zmin default value
Y_magnetC = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.29 0.6 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','-0.48'); % Zmax default value

% Right magnet
width_magnetR = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.05 0.4 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String', '3'); % Ymin default value
height_magnetR = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.13 0.4 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','3');% Ymax default value
Z_magnetR = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.21 0.4 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','3.008'); % Zmin default value
Y_magnetR = uicontrol('Style','edit',...
    'Units','normalized',...
    'Position',[0.29 0.4 0.06 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'String','0'); % Zmax default value

%% Default magnets position 
handles.magnetsPosition = axes('parent',bottomPanel,...
    'Position', [0.45 0.16 0.52 0.8],...
    'tag','scalarPotential',...
    'HandleVisibility','callback');

str_magnets = uicontrol('Style','text',...
    'String','Magnets Position  Z',...
    'Units','normalized',...
    'FontWeight','bold',...
    'Position',[0.55 0.03 0.3 0.05],...
    'parent',bottomPanel);

str_Y = uicontrol('Style','text',...
    'String','Y',...
    'Units','normalized',...
    'FontWeight','bold',...
    'Position',[0.4 0.5 0.02 0.05],...
    'parent',bottomPanel);

% Add magnetL, its center and OK button
% rectangle('Position',[x,y,w,h])
magnetL = rectangle('Position',[-4.508,-3,3,3],'facecolor','k',...
    'parent',handles.magnetsPosition);
magnetLCenter = rectangle('Position',[-3.008,-0.1,0.1,0.1],'facecolor','y',...
    'parent',handles.magnetsPosition);
magnetLOKBtn = uicontrol('Units','normalized',...
    'Position',[0.36 0.8 0.05 0.06],...
    'BackgroundColor',[1 1 1],...
    'String','OK',...
    'parent',bottomPanel,...
    'HandleVisibility','on',...
    'callback',@magnetL_callback);

% Add magnetC, its center and OK button
magnetC = rectangle('Position',[-1,-3.48,2,3],'facecolor','r',...
    'parent',handles.magnetsPosition);
magnetCCenter = rectangle('Position',[-0,-0.58,0.1,0.1],'facecolor','y',...
    'parent',handles.magnetsPosition);
magnetCOKBtn = uicontrol('Units','normalized',...
    'Position',[0.36 0.6 0.05 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'String','OK',...
    'HandleVisibility','on',...
    'callback',@magnetC_callback);

% Add magnetR and its center and OK button
magnetR = rectangle('Position',[1.508,-3,3,3],'facecolor','b',...
    'parent',handles.magnetsPosition);
magnetRCenter = rectangle('Position',[3.008,-0.1,0.1,0.1],'facecolor','y',...
    'parent',handles.magnetsPosition);
magnetROKBtn = uicontrol('Units','normalized',...
    'Position',[0.36 0.4 0.05 0.06],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'String','OK',...
    'HandleVisibility','on',...
    'callback',@magnetR_callback);

% put grid on
grid(handles.magnetsPosition,'on'); 

% Add run button. After placing all three magnets, click run button to
% obtain magnetic field plots.
runBtn = uicontrol('Units','normalized',...
    'Position',[0.17 0.2 0.1 0.1],...
    'BackgroundColor',[1 1 1],...
    'parent',bottomPanel,...
    'fontweight','bold',...    
    'String','Run',...
    'HandleVisibility','on',...
    'userdata',0,...
    'callback',@magneticFieldPlot);

%% Function to get Y and Z min and max limits
    function [Ymin, Ymax, Zmin, Zmax] = getYlimZlim
        Ymin = str2num(get(setYmin,'String'));
        Ymax = str2num(get(setYmax,'String'));
        Zmin = str2num(get(setZmin,'String'));
        Zmax = str2num(get(setZmax,'String'));
    end

%% Callback function to plot Y cross section 
    function magneticFieldY_callback(hObject,event_data)
        set(YSlider,'userdata',1); % if userdata=1, it is X cross section plot
        magneticFieldVectorPlot(hObject); % function to plot cross section
        set(YSlider,'userdata',0); % set userdata back to 0 after plotting 
    end

%% Callback function to plot Z cross section
    function magneticFieldZ_callback(hObject,event_data)
        set(ZSlider, 'userdata', 1); %if userdata=1, it is Y cross section plot
        magneticFieldVectorPlot(hObject);% function to plot cross section
        set(ZSlider, 'userdata', 0); %set userdata back to 0 after plotting
    end

%% Callback function of magnetL OK button. When the OK button is clicked,
% draw magnetL according to user input position(Zm,Ym), width(w) and height(h).
% In Matlab, rectangle('Position',[x,y,w,h]) draws the rectangle from the point x,y 
% and having a width of w and a height of h. 
% However, in order to apply the formula 
% (see'A compact permanent magnet array with a remote homogeneous field'),which requires all magnets 
% centered at the midpoint of the upper edge, we need to shift the center of the magnet to (Zm-w/2,Ym-h).
    function magnetL_callback(hObject,event_data)
        [Zm,Ym,w,h] = getmagnet_LLimits;
        Zm = Zm - w/2; % new center
        Ym = Ym - h; % new center
        delete(magnetL); % refresh 
        delete(magnetLCenter); % refresh 
        
        magnetL = rectangle('Position',[Zm,Ym,w,h],'facecolor','k',...
            'parent',handles.magnetsPosition);
        
        % magnets center
        magnetLCenter = rectangle('Position',[Zm+w/2,Ym+h-0.1,0.1,0.1],'facecolor','y',...
        'parent',handles.magnetsPosition);
    
        axis auto tight;
        grid on;

    end


%% Callback function of magnetC OK button. When the OK button is clicked,
% draw magnetC according to user input position(Zm,Ym), width(w) and height(h).
% The magnet is centered at (Zm-w/2,Ym-h).
    function magnetC_callback(hObject,event_data)
        [Zm,Ym,w,h] = getmagnet_CLimits;
        Zm = Zm - w/2;
        Ym = Ym - h;
        delete(magnetC);
        delete(magnetCCenter); 
        
        magnetC = rectangle('Position',[Zm,Ym,w,h],'facecolor','r',...
            'parent',handles.magnetsPosition);
        magnetCCenter = rectangle('Position',[Zm+w/2,Ym+h-0.1,0.1,0.1],'facecolor','y',...
        'parent',handles.magnetsPosition);
    
        axis auto tight;
        grid on;

    end


%% Callback function of magnetR OK button. When the OK button is clicked,
% draw magnetR according to user input position(Zm,Ym), width(w) and height(h).
% The magnet is centered at (Zm-w/2,Ym-h).
    function magnetR_callback(hObject,event_data)
        [Zm,Ym,w,h] = getmagnet_RLimits;
        Zm = Zm - w/2;
        Ym = Ym - h;
        
        delete(magnetR);
        delete(magnetRCenter); 
        
        magnetR = rectangle('Position',[Zm,Ym,w,h],'facecolor','b',...
            'parent',handles.magnetsPosition);
        magnetRCenter = rectangle('Position',[Zm+w/2,Ym+h-0.1,0.1,0.1],'facecolor','y',...
        'parent',handles.magnetsPosition);
    

        axes(handles.magnetsPosition);
        axis auto tight;
        grid on;

    end
%% Function to get the width, height and center position of the left
%  magenet.
    function [Zm,Ym,w,h] = getmagnet_LLimits
        w = str2num(get(width_magnetL,'String'));
        h = str2num(get(height_magnetL,'String'));
        Zm = str2num(get(Z_magnetL,'String'));
        Ym = str2num(get(Y_magnetL,'String'));

    end

%% Function to get the width, height and center position of the center
%  magenet.
    function [Zm,Ym,w,h] = getmagnet_CLimits
        w = str2num(get(width_magnetC,'String'));
        h = str2num(get(height_magnetC,'String'));
        Zm = str2num(get(Z_magnetC,'String'));
        Ym = str2num(get(Y_magnetC,'String'));

    end
%% Function to get the width, height and center position of the right
%  magenet.  
    function [Zm,Ym,w,h] = getmagnet_RLimits
        w = str2num(get(width_magnetR,'String'));
        h = str2num(get(height_magnetR,'String'));
        Zm = str2num(get(Z_magnetR,'String'));
        Ym = str2num(get(Y_magnetR,'String'));

    end

%% function draw the horizontal YLine when adjusting the Y slider 
    function YSlider_callback(hObject,event_data)

        %{
        get the Ymin/Ymax values;
        get the slider value (slider value is between [0,1]);
        convert the slider value to be the value between [Ymin,Ymax]
        %}
        %%%
        [newYValue,newZValue] = convertValues;
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;
        %%%
        
        delete(YLine); % delete the 
        
        pt1=[Zmin Zmax]; pt2=[newYValue newYValue];

        axes(handles.magneticField);
        YLine = plot(pt1,pt2,'b','LineWidth', 2); % plot the new line

        hold on
        magneticFieldZ_callback(hObject); % plot X cross section when adjusting Y slider

    end
%% Silimar to YSlider_callback
    function ZSlider_callback(hObject,event_data)
        %%%
        [newYValue,newZValue] = convertValues;
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;
        %%%
        delete(ZLine); % delete the old one
        pt1=[-20 20]; pt2=[newZValue newZValue];

        axes(handles.magneticField);
        ZLine = plot(pt2,pt1,'r','LineWidth', 2);% plot the new line

        magneticFieldY_callback(hObject); % plot Y cross section when adjusting Z slider
    end

%% Convert ymin and ymax to be values between [0,1]
% [0,1] is the actual range for both sliders.
    function [newYValue, newZValue] = convertValues
        % Get the Ymin and Ymax range [t1,t2]
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;

        % Get the current slider value 'ratio', which is a value between[0,1].
        % Using this ratio to convert the slider value be a value between [t1,t2]
        
        ratio = get(YSlider,'value');
        newYValue = Ymin + ratio*(Ymax-Ymin);
        set(YText,'String',num2str(newYValue));

        ratio = get(ZSlider,'value');
        newZValue = Zmin + ratio*(Zmax-Zmin);
        set(ZText,'String',num2str(newZValue));

    end

%% Function to calculate magnetic field and draw the contour plot.
    function magneticFieldPlot(hObject,event_data)
        run = get(runBtn,'userdata');

        if(run~=0) % clear the axes first if it is not the first time to plot.
            axes(handles.magneticField);
            cla;
        end

        run = 1;
        set(runBtn,'userdata',run);

        %%% Get all the limits
        [Z1,Y1,w1,h1] = getmagnet_LLimits;

        [Z2,Y2,w2,h2] = getmagnet_CLimits;

        [Z3,Y3,w3,h3] = getmagnet_RLimits;

        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;

        %%%

        z = linspace(Zmin,Zmax,301);
        y = linspace(Ymin,Ymax,301);

        [Z, Y] = meshgrid(z,y);

        Bz1 = unwrap((-atan2(Z-w1/2-Z1,Y-Y1)+atan2(Z+w1/2-Z1,Y-Y1)+atan2(Z-w1/2-Z1,Y+h1-Y1)-atan2(Z+w1/2-Z1,Y+h1-Y1))')';

        By1 = unwrap(0.5.*(log( ((Y-Y1).^2+(Z-Z1+w1/2).^2)./((Y-Y1).^2+(Z-Z1-w1/2).^2)) - log( ( (Y+h1-Y1).^2+(Z-Z1+w1/2).^2)./( (Y+h1-Y1).^2+(Z-Z1-w1/2).^2))));


        Bz2 = unwrap((-atan2(Z-Z2-w2/2,Y-Y2)+atan2(Z-Z2+w2/2,Y-Y2)+atan2(Z-Z2-w2/2,Y+h2-Y2)-atan2(Z-Z2+w2/2,Y+h2-Y2))')';

        By2 = unwrap(0.5.*(log( ((Y-Y2).^2+(Z-Z2+w2/2).^2)./((Y-Y2).^2+(Z-Z2-w2/2).^2)) - log( ( (Y+h2-Y2).^2+(Z-Z2+w2/2).^2)./( (Y+h2-Y2).^2+(Z-Z2-w2/2).^2))));

        Bz3 = unwrap((-atan2(Z-Z3-w3/2,Y-Y3)+atan2(Z-Z3+w3/2,Y-Y3)+atan2(Z-Z3-w3/2,Y+h3-Y3)-atan2(Z-Z3+w3/2,Y+h3-Y3))')';

        By3 = unwrap(0.5.*(log( ((Y-Y3).^2+(Z-Z3+w3/2).^2)./((Y-Y3).^2+(Z-Z3-w3/2).^2)) - log( ( (Y+h3-Y3).^2+(Z-Z3+w3/2).^2)./( (Y+h3-Y3).^2+(Z-Z3-w3/2).^2))));


        Bz = 1500*(Bz1+Bz2+Bz3);
        By = 1500*(By1+By2+By3);

        B = sqrt(Bz.^2+By.^2);

        B(find(B==Inf))=NaN; % if B==Inf, ignore.

        axes(handles.magneticField);
        contour(Z,Y,B, 100);
        Zm = Z;Ym = Y; % for exporting data purpose
        axis([Zmin,Zmax,Ymin,Ymax]);
        xlabel('Z');
        ylabel('Y');
        zlabel('B');

        hold on
        YLine = []; % initialize lines
        ZLine = [];

    end
%% Function to plot B_Y and B_Z
    function magneticFieldVectorPlot(hObject,event_data)
        isYPlot = get(YSlider,'userdata'); % check to see if it is Y cross section or Z
        [newYValue, newZValue] = convertValues;
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;
        %isZPlot = get(ZSlider, 'userdata');


        %%%
        [Z1,Y1,w1,h1] = getmagnet_LLimits;
        [Z2,Y2,w2,h2] = getmagnet_CLimits;
        [Z3,Y3,w3,h3] = getmagnet_RLimits;
        %%%

        if(isYPlot) %if it is to plot Z cross section
            
            Z = newZValue * ones(1,301);
            Y = linspace(Ymin,Ymax,301);
            axes(handles.magneticFieldZ);
        else %if(isZPlot)    %otherwise, plot Y cross section
            
            Z = linspace(Zmin,Zmax,301);
            Y = newYValue * ones(1,301);
            axes(handles.magneticFieldY);
            
        end


        %%%
        if(isYPlot) %if it is to plot Z cross section
        
            Bz1 = unwrap((-atan2(Z-w1/2-Z1,Y-Y1)+atan2(Z+w1/2-Z1,Y-Y1)+atan2(Z-w1/2-Z1,Y+h1-Y1)-atan2(Z+w1/2-Z1,Y+h1-Y1))')';
            By1 = unwrap(0.5.*(log( ((Y-Y1).^2+(Z-Z1+w1/2).^2)./((Y-Y1).^2+(Z-Z1-w1/2).^2)) - log( ( (Y+h1-Y1).^2+(Z-Z1+w1/2).^2)./( (Y+h1-Y1).^2+(Z-Z1-w1/2).^2))));

            Bz2 = unwrap((-atan2(Z-Z2-w2/2,Y-Y2)+atan2(Z-Z2+w2/2,Y-Y2)+atan2(Z-Z2-w2/2,Y+h2-Y2)-atan2(Z-Z2+w2/2,Y+h2-Y2))')';
            By2 = unwrap(0.5.*(log( ((Y-Y2).^2+(Z-Z2+w2/2).^2)./((Y-Y2).^2+(Z-Z2-w2/2).^2)) - log( ( (Y+h2-Y2).^2+(Z-Z2+w2/2).^2)./( (Y+h2-Y2).^2+(Z-Z2-w2/2).^2))));

            Bz3 = unwrap((-atan2(Z-Z3-w3/2,Y-Y3)+atan2(Z-Z3+w3/2,Y-Y3)+atan2(Z-Z3-w3/2,Y+h3-Y3)-atan2(Z-Z3+w3/2,Y+h3-Y3))')';
            By3 = unwrap(0.5.*(log( ((Y-Y3).^2+(Z-Z3+w3/2).^2)./((Y-Y3).^2+(Z-Z3-w3/2).^2)) - log( ( (Y+h3-Y3).^2+(Z-Z3+w3/2).^2)./( (Y+h3-Y3).^2+(Z-Z3-w3/2).^2))));

            Bz = 1500*(Bz1+Bz2+Bz3);
            By = 1500*(By1+By2+By3);

            %B_Z = sqrt(Bz.^2+By.^2);
            B_Z = Bz;
            B_Z_grad = gradient(B_Z(:)) ./ gradient(Y(:));
            B_Z_grad2 = gradient(B_Z_grad(:)) ./ gradient(Y(:));
            B_Z_grad3 = gradient(B_Z_grad2(:)) ./ gradient(Y(:));
            B_Z_grad4 = gradient(B_Z_grad3(:)) ./ gradient(Y(:));
            B(find(B==Inf))=NaN; % ignore if it is B==Inf
            
            
            plot(Y,B_Z,'r', Y, B_Z_grad, 'k');% plot
            ylabel(handles.magneticFieldZ,'B_o','fontsize',8);
            xlabel(handles.magneticFieldZ,'Y','fontsize',8);
            
            grid on;
        
        else %if(isZPlot) %otherwise, plot Y cross section
            Bz1 = unwrap((-atan2(Z-w1/2-Z1,Y-Y1)+atan2(Z+w1/2-Z1,Y-Y1)+atan2(Z-w1/2-Z1,Y+h1-Y1)-atan2(Z+w1/2-Z1,Y+h1-Y1))')';
            By1 = unwrap(0.5.*(log( ((Y-Y1).^2+(Z-Z1+w1/2).^2)./((Y-Y1).^2+(Z-Z1-w1/2).^2)) - log( ( (Y+h1-Y1).^2+(Z-Z1+w1/2).^2)./( (Y+h1-Y1).^2+(Z-Z1-w1/2).^2))));


            Bz2 = unwrap((-atan2(Z-Z2-w2/2,Y-Y2)+atan2(Z-Z2+w2/2,Y-Y2)+atan2(Z-Z2-w2/2,Y+h2-Y2)-atan2(Z-Z2+w2/2,Y+h2-Y2))')';
            By2 = unwrap(0.5.*(log( ((Y-Y2).^2+(Z-Z2+w2/2).^2)./((Y-Y2).^2+(Z-Z2-w2/2).^2)) - log( ( (Y+h2-Y2).^2+(Z-Z2+w2/2).^2)./( (Y+h2-Y2).^2+(Z-Z2-w2/2).^2))));

            Bz3 = unwrap((-atan2(Z-Z3-w3/2,Y-Y3)+atan2(Z-Z3+w3/2,Y-Y3)+atan2(Z-Z3-w3/2,Y+h3-Y3)-atan2(Z-Z3+w3/2,Y+h3-Y3))')';
            By3 = unwrap(0.5.*(log( ((Y-Y3).^2+(Z-Z3+w3/2).^2)./((Y-Y3).^2+(Z-Z3-w3/2).^2)) - log( ( (Y+h3-Y3).^2+(Z-Z3+w3/2).^2)./( (Y+h3-Y3).^2+(Z-Z3-w3/2).^2))));

            Bz = 1500*(Bz1+Bz2+Bz3);
            By = 1500*(By1+By2+By3);

            %B_Y = sqrt(Bz.^2+By.^2);
            B_Y = Bz;
            B_Y_grad = gradient(B_Y(:)) ./ gradient(Z(:));
            B_Y_grad2 = gradient(B_Y_grad(:)) ./ gradient(Z(:));
            B_Y_grad3 = gradient(B_Y_grad2(:)) ./ gradient(Z(:));
            B_Y_grad4 = gradient(B_Y_grad2(:)) ./ gradient(Z(:));
            B(find(B==Inf))=NaN;% ignore if it is B= Inf
            
            
            plot(Z,B_Y,'b', Z, B_Y_grad, 'k'); % plot
            ylabel(handles.magneticFieldY,'B_o','fontsize',8); %add labels
            xlabel(handles.magneticFieldY,'Z','fontsize',8);
            
            grid on;
            %%%
        %else
            %disp('Please adjust sliders')
            
        end

        axis tight auto;

    end


%% function to export Y cross section if exportYBtn clicked
    function exportYBtnClicked(hObject,event_data)
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;
        Z = linspace(Zmin, Zmax, 301);
        [file,path] = uiputfile('Y_Data.txt','Save file name')
        savefile = strcat(path,file);
        separator = NaN(1,50); % use 'NaN' to seperate variables
        save(savefile,'Z','separator','B_Y','-ASCII');

    end
%% function to export Z cross section if exportZBtn clicked
    function exportZBtnClicked(hObject,event_data)
        [Ymin, Ymax, Zmin, Zmax] = getYlimZlim;
        Y = linspace(Ymin, Ymax, 301);
        [file,path] = uiputfile('Z_Data.txt','Save file name')
        savefile = strcat(path,file);
        separator = NaN(1,50);% use 'NaN' to seperate variables
        save(savefile,'Y','separator','B_Z', '-ASCII');

    end
%% function to export contour values if exportContourBtn clicked
    function exportContourBtnClicked(hObject,event_data)
        [file,path] = uiputfile('ContourPlot_Data.txt','Save file name');
        savefile = strcat(path,file);
        separator = NaN(1,length(Zm));% use 'NaN' to seperate variables
        [r, c] = size(B);
        exportB = [Zm; separator; Ym; separator; B, zeros(c,length(Zm)-r)];
        save(savefile, 'exportB','-ASCII');

    end

%% About this program
    function about_callback (object, eventdata)
    
        figure('name','About This Program','MenuBar','none');
        
        strAbout(1) = {'About This Program: '};
        strAbout(2) = {''};
        strAbout(3) = {'Version 1.0'};
        strAbout(4) = {'Date: April 20,2007'};
        strAbout(5) = {'Created by: Chen Wang'};
        strAbout(6) = {''};
        strAbout(7) = {'Program is based on Andrew Marble'' PHD Thesis 2007'};
        strAbout(8) = {'Property of the University of New Brunswick'};
        uicontrol('Style','text',...
            'String',strAbout,'backgroundColor',[0.8 0.8 0.8],...
            'fontweight','bold','fontsize',12,'foregroundColor',[0 0 0],...
            'Units','normalized',...
            'Position',[0.1 0.1 0.8 0.8],...
            'HorizontalAlignment','left');
    end
%% Open Help file of this program(only works on windows machine)
    function help_callback (object, eventdata)
    winopen('help.doc')
    end

%%
end
